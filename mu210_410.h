#ifndef _MU_210_410_DEFS_H
#define _MU_210_410_DEFS_H

//! режим работы выхода DO1 - DO16, Чтение и запись, uint16_t
const uint32_t BASE_ADDR_REG_DO   = 0x110;
const uint32_t REG_DO1        = 0x110;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - генератор импульсов
const uint32_t REG_DO2        = 0x111;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - генератор импульсов
const uint32_t REG_DO3        = 0x112;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - генератор импульсов
const uint32_t REG_DO4        = 0x113;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ высокочастотный
const uint32_t REG_DO5        = 0x114;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ высокочастотный
const uint32_t REG_DO6        = 0x115;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ высокочастотный
const uint32_t REG_DO7        = 0x116;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ высокочастотный
const uint32_t REG_DO8        = 0x117;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ высокочастотный
const uint32_t REG_DO9        = 0x118;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ низкочастотный
const uint32_t REG_DO10       = 0x119;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ низкочастотный
const uint32_t REG_DO11       = 0x11A;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ низкочастотный
const uint32_t REG_DO12       = 0x11B;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ низкочастотный
const uint32_t REG_DO13       = 0x11C;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ низкочастотный
const uint32_t REG_DO14       = 0x11D;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ низкочастотный
const uint32_t REG_DO15       = 0x11E;// 0 - переключение логического сигнала, 1 - ШИМ, 3 - ШИМ низкочастотный
//! период низкочастотного ШИМ выхода DO1-DO16, 1000 - 60000 мсек,Чтение и запись, uint16_t
const uint32_t BASE_ADDR_PERIOD_WORK_DO = 0x134;

//!Коэффициент заполнения ШИМ выхода DO1 - DO16, 0...1000 (0,10 %), Чтение и запись, uint16_t
const uint32_t BASE_ADDR_K_F_PWM_DO = 0x134;

//! Частота генератора импульсов выхода, 1...60000 (Гц),Чтение и запись UINT 16
const uint32_t FREQ_GEN_DO1 = 0x174;
const uint32_t FREQ_GEN_DO2 = 0x175;
const uint32_t FREQ_GEN_DO3 = 0x176;
//! Количество импульсов генератора импульсов выхода, 0...65535 (импульсов),Чтение и запись
const uint32_t NUM_PWM_DO1  = 0x174;
const uint32_t NUM_PWM_DO2  = 0x175;
const uint32_t NUM_PWM_DO3  = 0x176;
//! Диагностика выхода DO1 - DO16, (0 – выкл.1 – вкл.), Чтение и запись, UINT 16
const uint32_t BASE_ADDR_DIAG_OUT_DO = 0x1B4;

//! Битовая маска состояния выходов, 0...65535, Только чтение
const uint32_t ADDR_GET_BIT_MASK_OUTPUT = 0x1D4;

//! Битовая маска установки состояния выходов, Чтение и запись
const uint32_t ADDR_SET_BIT_MASK_OUTPUT = 0x1D6;

//! Битовая маска Битовая маска диагностики реле и обрыва нагрузки выходов, 0...65535, Только чтение
const uint32_t ADDR_SET_BIT_MASK_OUTPUT = 0x1D8;

//! Тайм-аут перехода в безопасное состояние, 0...60 (секунд), UINT 8
const uint32_t ADDR_TIMEOUT_SAFE_ST = 0x2BC;

//! Безопасное состояние выхода DO1, 0...1000 (0,10 %) 0x1DA Чтение и запись UINT 16
const uint32_t BASE_ADDR_SAFE_ST_OUTPUT = 0x474;

//! Частота  высокочастотного ШИМ выхода DO1 1...60000 (Гц) 0x1FA Чтение и запись UINT 16
const uint32_t BASE_FREQ_PWM_DO = 0x1FA;

//! Значение счётчика генератора импульсов выхода DO1
const uint32_t ADDR_COUNT_GEN_IMPL_DO1 = 0x21A;
const uint32_t ADDR_COUNT_GEN_IMPL_DO2 = 0x21B;
const uint32_t ADDR_COUNT_GEN_IMPL_DO3 = 0x21C;
//! Режим включения выхода DO1 (0 — верхний ключ;1 — верхний и нижний ключи)
const uint32_t BASE_REG_SW_ON_DO    = 0x23A;
//! кол-во контроллеров
const uint8_t NUM_MU210 = 5;
#endif
